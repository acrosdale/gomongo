// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mgdb "github.com/acrosdale/gomongo/internal/db/mgdb"
	mock "github.com/stretchr/testify/mock"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MongoQueriesMock is an autogenerated mock type for the MongoQueries type
type MongoQueriesMock struct {
	mock.Mock
}

// DeleteOneProduct provides a mock function with given fields: ctx, filter, opts
func (_m *MongoQueriesMock) DeleteOneProduct(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DeleteOptions) int64); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.DeleteOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneProduct provides a mock function with given fields: ctx, filter, opts
func (_m *MongoQueriesMock) FindOneProduct(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions) (mgdb.Product, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mgdb.Product
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOneOptions) mgdb.Product); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		r0 = ret.Get(0).(mgdb.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.FindOneOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneUser provides a mock function with given fields: ctx, filter, opts
func (_m *MongoQueriesMock) FindOneUser(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions) (mgdb.User, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mgdb.User
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOneOptions) mgdb.User); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		r0 = ret.Get(0).(mgdb.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.FindOneOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOneProduct provides a mock function with given fields: ctx, document, opts
func (_m *MongoQueriesMock) InsertOneProduct(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, document)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.InsertOneOptions) string); ok {
		r0 = rf(ctx, document, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.InsertOneOptions) error); ok {
		r1 = rf(ctx, document, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOneUser provides a mock function with given fields: ctx, document, opts
func (_m *MongoQueriesMock) InsertOneUser(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, document)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.InsertOneOptions) string); ok {
		r0 = rf(ctx, document, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.InsertOneOptions) error); ok {
		r1 = rf(ctx, document, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOneProduct provides a mock function with given fields: ctx, filters, document, opts
func (_m *MongoQueriesMock) UpdateOneProduct(ctx context.Context, filters interface{}, document interface{}, opts ...*options.UpdateOptions) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, filters, document)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) int64); ok {
		r0 = rf(ctx, filters, document, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(ctx, filters, document, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
