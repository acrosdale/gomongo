// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mgdb "github.com/acrosdale/gomongo/internal/db/mgdb"
	mock "github.com/stretchr/testify/mock"
)

// UserAuthServicesInterfaceMock is an autogenerated mock type for the UserAuthServicesInterface type
type UserAuthServicesInterfaceMock struct {
	mock.Mock
}

// AuthenicateUser provides a mock function with given fields: ctx, user
func (_m *UserAuthServicesInterfaceMock) AuthenicateUser(ctx context.Context, user mgdb.User) (mgdb.User, error) {
	ret := _m.Called(ctx, user)

	var r0 mgdb.User
	if rf, ok := ret.Get(0).(func(context.Context, mgdb.User) mgdb.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(mgdb.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mgdb.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: ctx, user
func (_m *UserAuthServicesInterfaceMock) CreateToken(ctx context.Context, user mgdb.User) (string, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, mgdb.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mgdb.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserAuthServicesInterfaceMock) CreateUser(ctx context.Context, user mgdb.User) (string, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, mgdb.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mgdb.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
